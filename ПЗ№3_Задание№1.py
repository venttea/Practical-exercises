class Book: # определение нового класса
    def __init__ (self, author, pages, year): # метод, принимающий параметры класса
        self.author = author # установка атрибута “автор”, который равен значению “автор”
        self.pages = pages # установка атрибута “страницы”, который равен значению “страницы”
        self.year = year # установка атрибута “год”, который равен значению “год”
def get_author(self): # метод для возвращения значения атрибута “автор”
    return self.author # возвращение значения атрибута “автор”
def set_author(self, author): # метод для установки нового значения в атрибут “автор”
    self.author = author # присваивание значения параметра автор атрибуту self.author
def get_pages(self): # метод для возвращения значения атрибута “страницы”
    return self.pages # возвращение значения атрибута “страницы”
def set_pages(self, pages): # метод для установки нового значения в атрибут “страницы”
    self.pages = pages # присваивание значения параметра страницы атрибуту self.pages
def get_year(self): # метод для возвращения значения атрибута “год”
    return self.year # возвращение значения атрибута “год”
def set_year(self, year): # метод для установки нового значения в атрибут “год”
    self.year = year # присваивание значения параметра год атрибуту self.year

author = input("Введите автора книги: ") # запрос ввода ФИО автора у пользователя
pages = int(input("Введите количество страниц в книге: ")) # запрос ввода количества страниц у пользователя
year = int(input("Введите год написания книги: ")) # запрос ввода года написания книги у пользователя

knizhka = Book(author, pages, year) # создание нового объекта класса

print() # данный print выводит пустую строку и необходим для более комфортного глазу чтения
print(f"Автор книги: {knizhka.author}, в ней {knizhka.pages} страниц(-ы), а написана она в {knizhka.year} году") # вывод всех данных в тексте
